# 分为ci和cd两个阶段，ci1阶段使用maven进行编译，ci2阶段使用docker进行打包并上传到镜像仓库
stages:
  - ci
  - cd
# 默认变量值，若在api设置了变量值，api优先级更高会覆盖掉这里的值
variables:
  # JAVA运行参数
  # jvm参数设定
  JAVA_TOOL_OPTIONS: ''
  # MAVEN参数
  # MAVEN参数设定
  MAVEN_OPTS: ''
  # 各阶段使用的镜像
  # CI阶段使用的镜像
  CI_IMAGE: '172.16.0.73:5000/maven-digitaldg:v1'
  # CD阶段使用的镜像
  CD_IMAGE: 'docker:stable'
  # 基于什么打包，即from what image。该镜像必须注册到73机器的register中
  PACKAGE_IMAGE: 172.16.0.73:5000/adoptopenjdk:11-jre-hotspot
  # 配置是否运行CD
  # 是否开启CD 开启则设置为true
  CD_ENABLE: 'false'
  # Docker配置
  # Docker Register地址
  Register: '172.16.0.73:5000'
  # 打包镜像名称 版本号
  DOCKER_NAME: 'test:v1.0'
  # docker运行时的命令
  DOCKER_RUN: '-d -p 1880:8080'

# CI1阶段 maven工作
CI:
  # 指定使用的镜像
  image: $CI_IMAGE
  # 指定阶段
  stage: ci
  # 运行脚本, 编译测试打包
  script:
    # maven编译
    - echo "合法性检查"
    - mvn $MAVEN_OPTS -Dmaven.repo.local=.m2/repository validate -B
    - echo "开始编译"
    - mvn $MAVEN_OPTS -Dmaven.repo.local=.m2/repository compile -B
    - echo "开始测试"
    - mvn $MAVEN_OPTS -Dmaven.repo.local=.m2/repository test -B
    - echo "开始打包"
    - mvn $MAVEN_OPTS -Dmaven.repo.local=.m2/repository clean package -Dmaven.test.skip=true -B

  #    # 利用jib构造docker镜像及上传到register
  #    - echo "打包镜像并上传到register"
  #    - mvn compile jib:build -Djib.from.image=$PACKAGE_IMAGE -Djib.to.image=172.16.0.73:5000/$DOCKER_NAME

  # 创建runner时指定的tag
  tags:
    - test
  #   编译后有产物,所以要指定下过期时间和路径, 以供于其他阶段使用
  artifacts:
    expire_in: 1 days
    paths:
      - target/*.jar
      - target/*.war

# CD阶段
CD:
  # 仅当设置CD_ENABLE为true时CD阶段才会启动
  only:
    variables:
      - $CD_ENABLE == "true"
  image: $CD_IMAGE
  stage: cd
  script:
    # 运行容器
    - echo "运行容器"
    - docker run $DOCKER_RUN -e JAVA_TOOL_OPTIONS=$JAVA_TOOL_OPTIONS $Register/$DOCKER_NAME
  tags:
    - test
